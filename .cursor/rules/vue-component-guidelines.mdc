---
description: 
globs: *.vue
alwaysApply: false
---
# Vue Component Development Guidelines

## Component Structure
- Use the Vue 3 `<script setup lang="ts">` syntax for all new components
- Keep template, script, and style sections in that order
- Split large components into smaller, reusable ones
- Add a clear comment at the top of components describing their purpose

## Props and Events
- Define props using TypeScript with explicit types
- Provide defaults for optional props
- Use `defineEmits` for emitting events with proper typing
- Follow this pattern:
```vue
<script setup lang="ts">
// Component description here
import { ref } from 'vue'

// Props
const props = defineProps<{
  label: string
  initialValue?: number
}>()

// Emits
const emit = defineEmits<{
  change: [value: number]
  submit: [data: { value: number }]
}>()

// Rest of the component...
</script>
```

## State Management
- Keep component state local when possible
- Use `ref` and `reactive` from Vue 3 composition API
- Consider composables for reusable logic
- Avoid unnecessary complexity

## Styling
- Use `<style scoped>` to prevent style leakage
- Use CSS variables for theming and consistency
- Follow the project's naming conventions for classes

## Testing & Documentation
- Write or update documentation for reusable components
- Use descriptive variable and function names
- Add JSDoc comments for complex functions

## When Creating New Components
- Place new components in the `components/` directory
- Name the component file using PascalCase (e.g., `MyComponent.vue`)
- Import and register any child components
- Consider accessibility from the start

@components/HelloWorld.vue



